// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    username      String    @unique
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime
    posts         Post[]
    comments      Comment[]
    accounts      Account[]
    sessions      Session[]

    @@map(name: "users")
}

model Post {
    id        String   @id @default(cuid())
    title     String
    content   String?
    url       String
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?

    @@map(name: "posts")
}

model Comment {
    id        String   @id @default(cuid())
    content   String?
    createdAt DateTime @default(now())
    updatedAt DateTime
    published Boolean  @default(true)
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String?

    @@map(name: "comments")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verificationtokens")
}
